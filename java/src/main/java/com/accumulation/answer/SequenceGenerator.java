package com.accumulation.answer;


/*
// There is an array generated by a rule.
// The first item is 1. If k is in the array, then k*3 +1 and k*2+1 are in the array.
// The array is sorted. There are no duplicate values.
// Please write a function that accepts an input N. It should return the index N of the array.
// For example [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]  n=10, return 22
*/


import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class SequenceGenerator {


    /*
    * Please write a function that accepts an input N. It should return the index N of the array.
    * For example [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]  n=10, return 22
    *
    * Param: index 传入的数字下标
    * Return：返回下标指向的元素值
    * */
    public int getValue(int index) {
        int before; // 第一个数，即k*2+1
        int after; // 第二个数, 即使k*3+1

        // 数组初始化，并将第一个元素赋值为1
        List arrayList = new ArrayList<Integer>();
        arrayList.add(1);

        // 1、生成数组
        for (int i = 0; i < index; i++) {
            before = (int) arrayList.get(i) * 2 + 1;
            arrayList.add(before);
            after = (int) arrayList.get(i) * 3 + 1;
            arrayList.add(after);
        }

        // 2、由小到大排序
        Collections.sort(arrayList, (o1, o2) -> Integer.compare((int)o1, (int)o2));
        arrayList.forEach(element -> System.out.println(element));

        return (int)arrayList.get(index);
    }
}
